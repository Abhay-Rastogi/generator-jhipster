<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.repository;

<%_
    let { importApiModelProperty, importJsonIgnore, importJsonIgnoreProperties, importSet, uniqueEnums } = _processJavaEntityImports(fields, relationships);
    let eagerRelations = relationships.filter(function(rel) {
        return rel.relationshipType === 'many-to-one' || rel.relationshipType === 'one-to-one';
    });
_%>
import java.util.function.BiFunction;
<%_ if (fieldsContainBigDecimal === true) { _%>
import java.math.BigDecimal;
<%_} if (fieldsContainInstant === true) { _%>
import java.time.Instant;
<%_ } if (fieldsContainLocalDate === true) { _%>
import java.time.LocalDate;
<%_ } if (fieldsContainZonedDateTime === true) { _%>
import java.time.ZonedDateTime;
<%_ } if (fieldsContainDuration === true) { _%>
import java.time.Duration;
<%_ } if (fieldsContainUUID === true) { _%>
import java.util.UUID;
<%_ } _%>

import org.springframework.data.domain.Pageable;
<%_ if (databaseType === 'sql') { _%>
import io.r2dbc.spi.Row;
import io.r2dbc.spi.RowMetadata;

import org.springframework.data.r2dbc.core.DatabaseClient;
import org.springframework.data.r2dbc.core.ReactiveDataAccessStrategy;
import org.springframework.data.r2dbc.query.Criteria;
<%_ } _%>

import <%= packageName %>.domain.<%= asEntity(entityClass) %>;
<%_ Object.keys(uniqueEnums).forEach(function(element) { _%>

import <%= packageName %>.domain.enumeration.<%= element %>;
<%_ }); _%>

import reactor.core.publisher.Flux;

/**
 * Spring Data <%= humanDatabaseType %> reactive custom repository implementation for the <%= asEntity(entityClass) %> entity.
 */
@SuppressWarnings("unused")
public class <%= entityClass %>RepositoryInternalImpl implements <%= entityClass %>RepositoryInternal {
    private final DatabaseClient db;
    private final ReactiveDataAccessStrategy dataAccessStrategy;

    private final <%= entityClass %>Reader entityReader = new <%= entityClass %>Reader("ent");

<%_ for (idx in eagerRelations) {
      let rel = eagerRelations[idx];
      _%>
    private final <%= rel.otherEntityNameCapitalized %>Reader <%= rel.relationshipName %>Reader = new <%= rel.otherEntityNameCapitalized %>Reader("<%= rel.relationshipName %>");
<%_
    } 
  let joins = generateTableJoins(relationships);
_%>
    private final static String SELECT = "SELECT "
            + <%= entityClass %>SqlHelper.getColumnNames("ent", "entity")
        <%_ for (idx in eagerRelations) {
            let rel = eagerRelations[idx];
          _%>
           + ", " + <%= rel.otherEntityNameCapitalized %>SqlHelper.getColumnNames("<%= rel.relationshipName %>", "<%= rel.relationshipName %>")
        <%_ } _%>
            + " FROM <%= entityTableName %> entity "
<%_     for (idx in joins) { _%>
            + "<%= joins[idx] %>"
<%_     } _%>;

    public <%= entityClass %>RepositoryInternalImpl(DatabaseClient db, ReactiveDataAccessStrategy dataAccessStrategy) {
        this.db = db;
        this.dataAccessStrategy = dataAccessStrategy;
    }

<%_ if (pagination !== 'no') { _%>
    @Override
    public Flux<<%= asEntity(entityClass) %>> findAllBy(Pageable pageable) {
        return db.select().from(<%= asEntity(entityClass) %>.class)
                .page(pageable)
                .as(<%= asEntity(entityClass) %>.class)
                .all();
    }

    @Override
    public Flux<<%= asEntity(entityClass) %>> findAllBy(Pageable pageable, Criteria criteria) {
        return db.select().from(<%= asEntity(entityClass) %>.class)
                .matching(criteria)
                .page(pageable)
                .as(<%= asEntity(entityClass) %>.class)
                .all();
    }

<%_ } _%>
    @Override
    public Flux<<%= asEntity(entityClass) %>> findAllEager() {
        return db.execute(SELECT)
                .map(this::process)
                .all();
    }

    @Override
    public Flux<<%= asEntity(entityClass) %>> findOneEager(<%= primaryKeyType %> id) {
        return db.execute(SELECT + " WHERE entity.id = :id")
                .bind("id", id)
                .map(this::process)
                .all();
    }

    private <%= asEntity(entityClass) %> process(Row row, RowMetadata metadata) {
        <%= asEntity(entityClass) %> entity = entityReader.apply(row, metadata);
        <%_ eagerRelations.forEach(function(rel) { _%>
        entity.set<%= rel.relationshipNameCapitalized %>(<%= rel.relationshipName %>Reader.apply(row, metadata));
        <%_ }); _%>
        return entity;
    }
}

class <%= entityClass %>SqlHelper {
    static String getColumnNames(String tableAlias, String columnPrefix) {
<%_ 
  let columns = "%1$s.id as %2$s_id";
  fields.forEach(function(field) {
      columns = columns + ",%1$s." + field.fieldNameAsDatabaseColumn + " as %2$s_" + field.fieldNameAsDatabaseColumn;
  });
  eagerRelations.forEach(function(rel) {
      columns = columns + ",%1$s." + getColumnName(rel.relationshipName) +"_id as %2$s_" + getColumnName(rel.relationshipName)+ "_id";
  });
_%>
        return String.format("<%= columns %>", tableAlias, columnPrefix);
    }
}

class <%= entityClass %>Reader implements BiFunction<Row, RowMetadata, <%= asEntity(entityClass) %>> {
    private final String prefix;
    public <%= entityClass %>Reader(String prefix) {
        this.prefix = prefix;
    }
    @Override
    public <%= asEntity(entityClass) %> apply(Row row, RowMetadata metadata) {
        <%= asEntity(entityClass) %> entity = new <%= asEntity(entityClass) %>();
        entity.setId(row.get(prefix + "_id", Long.class));
        <%_ for (idx in fields) { 
            let field = fields[idx];
            let fieldType = field.fieldType;
            if (field.fieldTypeBlobContent === 'text') {
                fieldType = 'String';
            }
            _%>
        entity.set<%= field.fieldInJavaBeanMethod %>(row.get(prefix + "_<%= field.fieldNameAsDatabaseColumn %>", <%= fieldType %>.class));
        <%_ } _%>
        <%_ eagerRelations.forEach(function(rel) { _%>
        entity.set<%= rel.relationshipNameCapitalized %>Id(row.get(prefix + "_<%= getColumnName(rel.relationshipName) %>_id", Long.class));
        <%_ }); _%> 
        return entity;
    }

}